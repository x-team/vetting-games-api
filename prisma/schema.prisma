generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid()) @db.Uuid
  email String  @unique
  name  String?
  alias String?
  image String?

  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  games       Game[]
  SocialLogin SocialLogin[]
  scoreboards Scoreboard[]

  @@index(fields: [active])
}

enum SocialType {
  GITHUB
}

model SocialLogin {
  id     String     @id
  social SocialType

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index(fields: [active])
}

model Mission {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  type        String
  level       Int
  releaseDate DateTime?

  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  bugs       Bug[]
  games      Game[]
  sourceCode MissionSourceCode[]
  Scoreboard Scoreboard[]

  @@unique([type, level])
  @@index(fields: [active])
  @@index(fields: [active, type])
}

model Bug {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  realBug     Boolean @default(true)

  missionId Int
  mission   Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)
  games     BugOnGame[]

  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index(fields: [active])
}

model MissionSourceCode {
  id  String @id @default(uuid()) @db.Uuid
  src String

  missionId Int
  mission   Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)
}

model Game {
  id         String    @id @default(uuid()) @db.Uuid
  score      Decimal?  @db.Decimal(5, 4)
  startedAt  DateTime  @default(now())
  finishedAt DateTime?

  missionId  Int
  mission    Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)
  userId     String      @db.Uuid
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bugs       BugOnGame[]
  scoreboard Scoreboard?

  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index(fields: [active])
}

model BugOnGame {
  gameId String @db.Uuid
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  bugId  Int
  bug    Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)

  @@id([gameId, bugId])
}

model Scoreboard {
  id    String @id @default(uuid()) @db.Uuid
  score Int

  gameId    String  @unique @db.Uuid
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  missionId Int
  mission   Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([missionId, userId])
  @@index(fields: [active, missionId])
  @@index(fields: [active])
}
